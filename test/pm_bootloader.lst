     1                                  [BITS 32]
     2                                  [ORG 0x7e00]
     3                                  
     4                                  %define DATA_SEG 8
     5                                  %define CODE_SEG 16
     6                                  
     7                                  PM_BOOTLOADER_START:
     8                                  
     9                                  %include "boot_data.asm"
     1                              <1> GDT:
     2                              <1> ; NULL
     3 00000000 00000000            <1> DD 0
     4 00000004 00000000            <1> DD 0
     5                              <1> ; KERNAL DATA
     6 00000008 FFFF                <1> DW 0xffff ; Limit 0-15
     7 0000000A 0000                <1> DW 0x0000 ; Base 0-15
     8 0000000C 00                  <1> DB 0x0000 ; Base 16-23
     9 0000000D 92                  <1> DB 0b10010010 ; Access byte
    10 0000000E CF                  <1> DB 0b11001111 ; Limit 16-19 + Flags 0-3
    11 0000000F 00                  <1> DB 0x00 ; Base 24-31
    12                              <1> ; KERNAL CODE
    13 00000010 FFFF                <1> DW 0xffff
    14 00000012 0000                <1> DW 0x0000
    15 00000014 00                  <1> DB 0x0000
    16 00000015 9A                  <1> DB 0b10011010
    17 00000016 CF                  <1> DB 0b11001111
    18 00000017 00                  <1> DB 0x00
    19                              <1> 
    20                              <1> GDT_DESCRIPTOR:
    21 00000018 1700                <1> DW 23 ; Size minus 1
    22 0000001A [00000000]          <1> DD GDT
    23                              <1> 
    24                              <1> POTAT_STRS:
    25 0000001E [2E00]              <1> dw .POT_1
    26 00000020 [9500]              <1> dw .POT_2
    27 00000022 [BA00]              <1> dw .POT_3
    28 00000024 [DF00]              <1> dw .POT_4
    29 00000026 [1D01]              <1> dw .POT_5
    30 00000028 [B401]              <1> dw .POT_6
    31 0000002A [E601]              <1> dw .POT_7
    32 0000002C [3102]              <1> dw .POT_8
    33                              <1> .POT_1:
    34 0000002E 5468697320706F7461- <1> db "This potato only generates 1.1 volts of electricity. I literally do not have the energy to lie to you.", 0
    34 00000037 746F206F6E6C792067- <1>
    34 00000040 656E65726174657320- <1>
    34 00000049 312E3120766F6C7473- <1>
    34 00000052 206F6620656C656374- <1>
    34 0000005B 7269636974792E2049- <1>
    34 00000064 206C69746572616C6C- <1>
    34 0000006D 7920646F206E6F7420- <1>
    34 00000076 686176652074686520- <1>
    34 0000007F 656E6572677920746F- <1>
    34 00000088 206C696520746F2079- <1>
    34 00000091 6F752E00            <1>
    35                              <1> .POT_2:
    36 00000095 49207468696E6B2049- <1> db "I think I hear the bird! Pick me up!", 0
    36 0000009E 206865617220746865- <1>
    36 000000A7 206269726421205069- <1>
    36 000000B0 636B206D6520757021- <1>
    36 000000B9 00                  <1>
    37                              <1> .POT_3:
    38 000000BA 44696420616E797468- <1> db "Did anything happen while I was out?", 0
    38 000000C3 696E67206861707065- <1>
    38 000000CC 6E207768696C652049- <1>
    38 000000D5 20776173206F75743F- <1>
    38 000000DE 00                  <1>
    39                              <1> .POT_4:
    40 000000DF 4361726F6C696E652E- <1> db "Caroline... Caroline... Caroline... Why do I know this woman?", 0
    40 000000E8 2E2E204361726F6C69- <1>
    40 000000F1 6E652E2E2E20436172- <1>
    40 000000FA 6F6C696E652E2E2E20- <1>
    40 00000103 57687920646F204920- <1>
    40 0000010C 6B6E6F772074686973- <1>
    40 00000115 20776F6D616E3F00    <1>
    41                              <1> .POT_5:
    42 0000011D 4865792C206A757374- <1> db "Hey, just in case this pit isn't actually bottomless, do you think maybe you could unstrap one of those long fall boots of yours and shove me into it?", 0
    42 00000126 20696E206361736520- <1>
    42 0000012F 746869732070697420- <1>
    42 00000138 69736E277420616374- <1>
    42 00000141 75616C6C7920626F74- <1>
    42 0000014A 746F6D6C6573732C20- <1>
    42 00000153 646F20796F75207468- <1>
    42 0000015C 696E6B206D61796265- <1>
    42 00000165 20796F7520636F756C- <1>
    42 0000016E 6420756E7374726170- <1>
    42 00000177 206F6E65206F662074- <1>
    42 00000180 686F7365206C6F6E67- <1>
    42 00000189 2066616C6C20626F6F- <1>
    42 00000192 7473206F6620796F75- <1>
    42 0000019B 727320616E64207368- <1>
    42 000001A4 6F7665206D6520696E- <1>
    42 000001AD 746F2069743F00      <1>
    43                              <1> .POT_6:
    44 000001B4 536F2C20686F772061- <1> db "So, how are you holding up? BECAUSE I'M A POTATO!", 0
    44 000001BD 726520796F7520686F- <1>
    44 000001C6 6C64696E672075703F- <1>
    44 000001CF 204245434155534520- <1>
    44 000001D8 49274D204120504F54- <1>
    44 000001E1 41544F2100          <1>
    45                              <1> .POT_7:
    46 000001E6 596F75206C696B6520- <1> db "You like revenge, right? Everybody likes revenge. Well, let's go get some.", 0
    46 000001EF 726576656E67652C20- <1>
    46 000001F8 72696768743F204576- <1>
    46 00000201 657279626F6479206C- <1>
    46 0000020A 696B65732072657665- <1>
    46 00000213 6E67652E2057656C6C- <1>
    46 0000021C 2C206C657427732067- <1>
    46 00000225 6F2067657420736F6D- <1>
    46 0000022E 652E00              <1>
    47                              <1> .POT_8:
    48 00000231 4C6574277320676574- <1> db "Let's get mad! If we're going to explode, let's at least explode with some dignity.", 0
    48 0000023A 206D61642120496620- <1>
    48 00000243 776527726520676F69- <1>
    48 0000024C 6E6720746F20657870- <1>
    48 00000255 6C6F64652C206C6574- <1>
    48 0000025E 2773206174206C6561- <1>
    48 00000267 7374206578706C6F64- <1>
    48 00000270 65207769746820736F- <1>
    48 00000279 6D65206469676E6974- <1>
    48 00000282 792E00              <1>
    49                              <1> POTAT_STRS_PTR:
    50 00000285 0000                <1> dw 0
    10                                  
    11                                  %include "boot_pm.asm"
     1                              <1> ; Preparing boot in 32 bit mode
     2                              <1> 
     3                              <1> %define TTY_ADDR 0xb8000
     4                              <1> %define KERNEL_START_ADDR 0x100000
     5                              <1> 
     6                              <1> [BITS 32]
     7                              <1> 
     8                              <1> START_32:
     9                              <1> 
    10 00000287 66B80800            <1> mov AX, DATA_SEG
    11 0000028B 8ED8                <1> mov DS, AX
    12 0000028D 8ED0                <1> mov SS, AX
    13 0000028F 8EC0                <1> mov ES, AX
    14 00000291 8EE0                <1> mov FS, AX
    15 00000293 8EE8                <1> mov GS, AX
    16                              <1> 
    17 00000295 66B8000F            <1> mov AX, 0x0f00
    18 00000299 66B9D007            <1> mov CX, 80*25
    19 0000029D BF00800B00          <1> mov EDI, TTY_ADDR
    20 000002A2 F366AB              <1> rep stosw
    21                              <1> 
    22 000002A5 BE00000000          <1> mov ESI, 0
    23 000002AA BB00000000          <1> mov EBX, 0
    24 000002AF 668B35[85020000]    <1> mov SI, [POTAT_STRS_PTR]
    25 000002B6 E826000000          <1> call PM_PRINT_STRING
    26                              <1> 
    27 000002BB EBFE                <1> jmp $
    28                              <1> 
    29                              <1> %include "pm_print.asm"
     1                              <2> [BITS 32]
     2                              <2> 
     3                              <2> %define TTY_WIDTH 80
     4                              <2> 
     5                              <2> ; Move EBX to start of next line
     6                              <2> PM_PRINT_NEWLINE:
     7 000002BD 9C                  <2> pushf
     8 000002BE 50                  <2> push EAX
     9 000002BF 52                  <2> push EDX
    10                              <2> 
    11 000002C0 BA00000000          <2> mov EDX, 0
    12 000002C5 89D8                <2> mov EAX, EBX
    13 000002C7 BBA0000000          <2> mov EBX, TTY_WIDTH * 2
    14 000002CC F7F3                <2> div EBX
    15 000002CE BA00000000          <2> mov EDX, 0
    16 000002D3 F7E3                <2> mul EBX
    17                              <2> 
    18 000002D5 89C3                <2> mov EBX, EAX
    19 000002D7 81C3A0000000        <2> add EBX, TTY_WIDTH * 2
    20                              <2> 
    21 000002DD 5A                  <2> pop EDX
    22 000002DE 58                  <2> pop EAX
    23 000002DF 9D                  <2> popf
    24 000002E0 C3                  <2> ret
    25                              <2> 
    26                              <2> 
    27                              <2> ; Print string at ESI to cursor position EBX and return new cursor position to EBX
    28                              <2> PM_PRINT_STRING:
    29 000002E1 50                  <2> push EAX
    30 000002E2 52                  <2> push EDX
    31 000002E3 56                  <2> push ESI
    32 000002E4 9C                  <2> pushf
    33                              <2> 
    34 000002E5 B40F                <2> mov Ah, 0x0f
    35                              <2> 
    36                              <2> .LOOP:
    37 000002E7 8A06                <2> mov Al, [ESI]
    38                              <2> 
    39 000002E9 3C00                <2> cmp Al, 0
    40 000002EB 7419                <2> je .END
    41                              <2> 
    42 000002ED 3C0A                <2> cmp Al, 0x0a
    43 000002EF 740D                <2> je .NEWLINE
    44                              <2> 
    45 000002F1 66898300800B00      <2> mov [EBX + TTY_ADDR], AX
    46 000002F8 46                  <2> inc ESI
    47 000002F9 83C302              <2> add EBX, 2
    48 000002FC EBE9                <2> jmp .LOOP
    49                              <2> 
    50                              <2> .NEWLINE:
    51 000002FE E8BAFFFFFF          <2> call PM_PRINT_NEWLINE
    52 00000303 46                  <2> inc ESI
    53 00000304 EBE1                <2> jmp .LOOP
    54                              <2> 
    55                              <2> .END:
    56 00000306 9D                  <2> popf
    57 00000307 5E                  <2> pop ESI
    58 00000308 5A                  <2> pop EDX
    59 00000309 58                  <2> pop EAX
    60 0000030A C3                  <2> ret
    30                              <1> 
    31 0000030B 00<rep 17Ch>        <1> TIMES 512 - ($-START_32) DB 0
    12                                  %include "interrupt_driver.asm"
     1                              <1> [BITS 32]
     2                              <1> 
     3                              <1> INTDRIVER_START:
     4                              <1> 
     5                              <1> %define PIC1_COMMAND 0x20
     6                              <1> %define PIC2_COMMAND 0xa0
     7                              <1> %define PIC1_DATA    0x21
     8                              <1> %define PIC2_DATA    0xa1
     9                              <1> 
    10                              <1> %define PIC1_OFFSET 0x20
    11                              <1> %define PIC2_OFFSET 0x28
    12                              <1> 
    13                              <1> %define ICW1_ICW4       0x01 ; Indicates that ICW4 will be present
    14                              <1> %define ICW1_SINGLE     0x02 ; Single (cascade) mode
    15                              <1> %define ICW1_INTERVAL4  0x04 ; Call address interval 4 (8)
    16                              <1> %define ICW1_LEVEL      0x08 ; Level triggered (edge) mode
    17                              <1> %define ICW1_INIT       0x10 ; Initialization - required!
    18                              <1> 
    19                              <1> %define ICW4_8086       0x01 ; 8086/88 (MCS-80/85) mode
    20                              <1> %define ICW4_AUTO       0x02 ; Auto (normal) EOI
    21                              <1> %define ICW4_BUF_SLAVE  0x08 ; Buffered mode/slave
    22                              <1> %define ICW4_BUF_MASTER 0x0C ; Buffered mode/master
    23                              <1> %define ICW4_SFNM       0x10 ; Special fully nested (not)
    24                              <1> 
    25                              <1> %macro _IO_WAIT 0
    26                              <1> 	mov Al, 0
    27                              <1> 	out 0x80, Al
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> %macro _OUTB 2
    31                              <1> 	mov Al, %2
    32                              <1> 	out %1, Al
    33                              <1> %endmacro
    34                              <1> 
    35                              <1> 
    36                              <1> ; When IRQ comes from slave PIC (PIC2), send EOI to PIC2, PIC1. Otherwise, just send to PIC1
    37                              <1> 
    38                              <1> ; Remap IRQs to 0x20-0x2f (range after intel exception interrupts)
    39                              <1> ; Taken from OSDev :3
    40                              <1> INTDRIVER_PIC_INIT:
    41 00000487 60                  <1> pusha
    42 00000488 9C                  <1> pushf
    43                              <1> 
    44                              <1> _OUTB PIC1_COMMAND, ICW1_INIT | ICW1_ICW4 ; starts the initialization sequence (in cascade mode)
    31 00000489 B011                <2>  mov Al, %2
    32 0000048B E620                <2>  out %1, Al
    45                              <1> _IO_WAIT
    26 0000048D B000                <2>  mov Al, 0
    27 0000048F E680                <2>  out 0x80, Al
    46                              <1> _OUTB PIC2_COMMAND, ICW1_INIT | ICW1_ICW4
    31 00000491 B011                <2>  mov Al, %2
    32 00000493 E6A0                <2>  out %1, Al
    47                              <1> _IO_WAIT
    26 00000495 B000                <2>  mov Al, 0
    27 00000497 E680                <2>  out 0x80, Al
    48                              <1> _OUTB PIC1_DATA, PIC1_OFFSET              ; ICW2: Master PIC vector offset
    31 00000499 B020                <2>  mov Al, %2
    32 0000049B E621                <2>  out %1, Al
    49                              <1> _IO_WAIT
    26 0000049D B000                <2>  mov Al, 0
    27 0000049F E680                <2>  out 0x80, Al
    50                              <1> _OUTB PIC2_DATA, PIC2_OFFSET              ; ICW2: Slave PIC vector offset
    31 000004A1 B028                <2>  mov Al, %2
    32 000004A3 E6A1                <2>  out %1, Al
    51                              <1> _IO_WAIT
    26 000004A5 B000                <2>  mov Al, 0
    27 000004A7 E680                <2>  out 0x80, Al
    52                              <1> _OUTB PIC1_DATA, 4                        ; ICW3: tell Master PIC that there is a slave PIC at IRQ2 (0000 0100)
    31 000004A9 B004                <2>  mov Al, %2
    32 000004AB E621                <2>  out %1, Al
    53                              <1> _IO_WAIT
    26 000004AD B000                <2>  mov Al, 0
    27 000004AF E680                <2>  out 0x80, Al
    54                              <1> _OUTB PIC2_DATA, 2                        ; ICW3: tell Slave PIC its cascade identity (0000 0010)
    31 000004B1 B002                <2>  mov Al, %2
    32 000004B3 E6A1                <2>  out %1, Al
    55                              <1> _IO_WAIT
    26 000004B5 B000                <2>  mov Al, 0
    27 000004B7 E680                <2>  out 0x80, Al
    56                              <1> 
    57                              <1> _OUTB PIC1_DATA, ICW4_8086                ; ICW4: have the PICs use 8086 mode (and not 8080 mode)
    31 000004B9 B001                <2>  mov Al, %2
    32 000004BB E621                <2>  out %1, Al
    58                              <1> _IO_WAIT
    26 000004BD B000                <2>  mov Al, 0
    27 000004BF E680                <2>  out 0x80, Al
    59                              <1> _OUTB PIC2_DATA, ICW4_8086
    31 000004C1 B001                <2>  mov Al, %2
    32 000004C3 E6A1                <2>  out %1, Al
    60                              <1> _IO_WAIT
    26 000004C5 B000                <2>  mov Al, 0
    27 000004C7 E680                <2>  out 0x80, Al
    61                              <1> 
    62                              <1> ; Unmask both PICs.
    63                              <1> _OUTB PIC1_DATA, 0
    31 000004C9 B000                <2>  mov Al, %2
    32 000004CB E621                <2>  out %1, Al
    64                              <1> _OUTB PIC2_DATA, 0
    31 000004CD B000                <2>  mov Al, %2
    32 000004CF E6A1                <2>  out %1, Al
    65                              <1> 
    66 000004D1 61                  <1> popa
    67 000004D2 9D                  <1> popf
    68 000004D3 C3                  <1> ret
    69                              <1> 
    70 000004D4 00<rep 1B3h>        <1> TIMES 512 - ($-INTDRIVER_START) DB 0
    13                                  
    14 00000687 00<rep 179h>            TIMES 2048 - ($-PM_BOOTLOADER_START) DB 0
